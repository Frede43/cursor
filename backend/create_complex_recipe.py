#!/usr/bin/env python
"""
Script pour cr√©er une recette complexe avec de nombreux ingr√©dients
Test du syst√®me de gestion transactionnelle
"""
import os
import sys
import django
from decimal import Decimal

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barstock_api.settings')
django.setup()

from kitchen.models import Ingredient, Recipe, RecipeIngredient
from products.models import Product, Category
from accounts.models import User


def create_additional_ingredients():
    """Cr√©er des ingr√©dients suppl√©mentaires pour la recette complexe"""
    
    additional_ingredients = [
        {
            'nom': 'Beurre',
            'quantite_restante': Decimal('1.000'),
            'unite': 'kg',
            'seuil_alerte': Decimal('0.200'),
            'prix_unitaire': Decimal('4000.00'),
            'description': 'Beurre de cuisine'
        },
        {
            'nom': 'Lait',
            'quantite_restante': Decimal('3.000'),
            'unite': 'L',
            'seuil_alerte': Decimal('0.500'),
            'prix_unitaire': Decimal('1500.00'),
            'description': 'Lait frais'
        },
        {
            'nom': 'Farine',
            'quantite_restante': Decimal('5.000'),
            'unite': 'kg',
            'seuil_alerte': Decimal('1.000'),
            'prix_unitaire': Decimal('1000.00'),
            'description': 'Farine de bl√©'
        },
        {
            'nom': '≈íufs',
            'quantite_restante': Decimal('2.000'),  # 2 kg (environ 30 ≈ìufs)
            'unite': 'kg',
            'seuil_alerte': Decimal('0.500'),
            'prix_unitaire': Decimal('3000.00'),
            'description': '≈íufs frais'
        },
        {
            'nom': 'Carottes',
            'quantite_restante': Decimal('2.500'),
            'unite': 'kg',
            'seuil_alerte': Decimal('0.500'),
            'prix_unitaire': Decimal('700.00'),
            'description': 'Carottes fra√Æches'
        },
        {
            'nom': 'Pommes de terre',
            'quantite_restante': Decimal('8.000'),
            'unite': 'kg',
            'seuil_alerte': Decimal('2.000'),
            'prix_unitaire': Decimal('500.00'),
            'description': 'Pommes de terre'
        },
        {
            'nom': 'Persil',
            'quantite_restante': Decimal('0.200'),
            'unite': 'kg',
            'seuil_alerte': Decimal('0.050'),
            'prix_unitaire': Decimal('8000.00'),
            'description': 'Persil frais'
        },
        {
            'nom': 'Thym',
            'quantite_restante': Decimal('0.100'),
            'unite': 'kg',
            'seuil_alerte': Decimal('0.020'),
            'prix_unitaire': Decimal('12000.00'),
            'description': 'Thym s√©ch√©'
        },
        {
            'nom': 'Laurier',
            'quantite_restante': Decimal('0.050'),
            'unite': 'kg',
            'seuil_alerte': Decimal('0.010'),
            'prix_unitaire': Decimal('15000.00'),
            'description': 'Feuilles de laurier'
        },
        {
            'nom': 'Vin blanc',
            'quantite_restante': Decimal('1.500'),
            'unite': 'L',
            'seuil_alerte': Decimal('0.250'),
            'prix_unitaire': Decimal('8000.00'),
            'description': 'Vin blanc de cuisine'
        },
        {
            'nom': 'Bouillon de poule',
            'quantite_restante': Decimal('2.000'),
            'unite': 'L',
            'seuil_alerte': Decimal('0.500'),
            'prix_unitaire': Decimal('2500.00'),
            'description': 'Bouillon de poule concentr√©'
        }
    ]
    
    created = []
    for ingredient_data in additional_ingredients:
        ingredient, was_created = Ingredient.objects.get_or_create(
            nom=ingredient_data['nom'],
            defaults=ingredient_data
        )
        if was_created:
            created.append(ingredient)
            print(f"‚úÖ Ingr√©dient cr√©√©: {ingredient.nom}")
    
    return created


def create_complex_recipe():
    """Cr√©er une recette complexe: Coq au Vin Burundais (15 ingr√©dients)"""
    
    # Cr√©er le produit
    plat_category = Category.objects.get_or_create(
        name='Plats principaux',
        defaults={'type': 'plats', 'description': 'Plats de r√©sistance'}
    )[0]
    
    coq_au_vin, created = Product.objects.get_or_create(
        name='Coq au Vin Burundais',
        category=plat_category,
        defaults={
            'unit': 'portion',
            'purchase_price': Decimal('4500.00'),
            'selling_price': Decimal('7500.00'),
            'current_stock': 15,
            'minimum_stock': 3,
            'description': 'Sp√©cialit√© burundaise: coq mijot√© au vin blanc avec l√©gumes'
        }
    )
    
    if not created and hasattr(coq_au_vin, 'recipe'):
        print(f"‚ö†Ô∏è La recette pour {coq_au_vin.name} existe d√©j√†")
        return coq_au_vin.recipe
    
    # R√©cup√©rer un utilisateur
    user = User.objects.filter(is_superuser=True).first() or User.objects.first()
    if not user:
        print("‚ùå Aucun utilisateur trouv√©")
        return None
    
    # Cr√©er la recette
    recipe = Recipe.objects.create(
        plat=coq_au_vin,
        nom_recette='Coq au Vin Burundais Traditionnel',
        description='Recette traditionnelle burundaise du coq au vin avec 15 ingr√©dients soigneusement s√©lectionn√©s',
        instructions="""
1. D√©couper le poulet en morceaux et le faire mariner 2h dans le vin blanc
2. √âplucher et couper les l√©gumes (carottes, pommes de terre, oignons)
3. Faire revenir le poulet dans le beurre et l'huile
4. Ajouter les oignons et l'ail, faire dorer
5. Saupoudrer de farine, m√©langer
6. Verser le vin de marinade et le bouillon
7. Ajouter les herbes (thym, laurier, persil)
8. Laisser mijoter 45 minutes
9. Ajouter les l√©gumes et cuire 30 minutes
10. Assaisonner et servir avec du riz
        """.strip(),
        temps_preparation=120,  # 2 heures
        portions=1,
        created_by=user
    )
    
    # D√©finir les ingr√©dients et leurs quantit√©s (pour 1 portion)
    ingredients_recipe = [
        ('Poulet', Decimal('0.600')),      # 600g de poulet
        ('Vin blanc', Decimal('0.200')),   # 200ml de vin
        ('Bouillon de poule', Decimal('0.150')), # 150ml de bouillon
        ('Oignons', Decimal('0.100')),     # 100g d'oignons
        ('Carottes', Decimal('0.150')),    # 150g de carottes
        ('Pommes de terre', Decimal('0.300')), # 300g de pommes de terre
        ('Ail', Decimal('0.015')),         # 15g d'ail
        ('Beurre', Decimal('0.030')),      # 30g de beurre
        ('Huile', Decimal('0.020')),       # 20ml d'huile
        ('Farine', Decimal('0.025')),      # 25g de farine
        ('Thym', Decimal('0.002')),        # 2g de thym
        ('Laurier', Decimal('0.001')),     # 1g de laurier
        ('Persil', Decimal('0.010')),      # 10g de persil
        ('Sel', Decimal('0.008')),         # 8g de sel
        ('√âpices', Decimal('0.005'))       # 5g d'√©pices m√©lang√©es
    ]
    
    # Cr√©er les liens ingr√©dients-recette
    created_links = []
    for ingredient_name, quantity in ingredients_recipe:
        try:
            ingredient = Ingredient.objects.get(nom=ingredient_name)
            
            recipe_ingredient = RecipeIngredient.objects.create(
                recipe=recipe,
                ingredient=ingredient,
                quantite_utilisee_par_plat=quantity,
                unite=ingredient.unite,
                is_optional=False  # Tous les ingr√©dients sont obligatoires
            )
            created_links.append(recipe_ingredient)
            print(f"  ‚úÖ {ingredient_name}: {quantity} {ingredient.unite}")
            
        except Ingredient.DoesNotExist:
            print(f"  ‚ùå Ingr√©dient manquant: {ingredient_name}")
    
    print(f"\nüçΩÔ∏è Recette cr√©√©e: {recipe.nom_recette}")
    print(f"   üìä Ingr√©dients: {len(created_links)}/15")
    print(f"   üí∞ Co√ªt estim√©: {recipe.total_cost:.0f} BIF")
    print(f"   ‚è±Ô∏è Temps de pr√©paration: {recipe.temps_preparation} minutes")
    
    return recipe


def test_complex_recipe():
    """Tester la recette complexe"""
    
    print("\nüß™ TEST DE LA RECETTE COMPLEXE")
    print("=" * 50)
    
    try:
        recipe = Recipe.objects.get(nom_recette='Coq au Vin Burundais Traditionnel')
    except Recipe.DoesNotExist:
        print("‚ùå Recette non trouv√©e")
        return
    
    print(f"üìù Recette: {recipe.nom_recette}")
    print(f"üìä Nombre d'ingr√©dients: {recipe.ingredients.count()}")
    
    # Test 1: V√©rifier la disponibilit√© pour 1 portion
    print(f"\nüîç Test 1: Disponibilit√© pour 1 portion")
    validation = recipe.validate_ingredients_availability(1)
    print(f"   Peut √™tre pr√©par√©e: {'‚úÖ OUI' if validation['can_prepare'] else '‚ùå NON'}")
    print(f"   Ingr√©dients disponibles: {validation['available_count']}/{validation['total_ingredients']}")
    
    if validation['missing_ingredients']:
        print(f"   Ingr√©dients manquants:")
        for missing in validation['missing_ingredients']:
            print(f"     - {missing['name']}: besoin {missing['needed']} {missing['unit']}, disponible {missing['available']}")
    
    # Test 2: V√©rifier pour 5 portions (stress test)
    print(f"\nüîç Test 2: Disponibilit√© pour 5 portions (stress test)")
    validation_5 = recipe.validate_ingredients_availability(5)
    print(f"   Peut √™tre pr√©par√©e: {'‚úÖ OUI' if validation_5['can_prepare'] else '‚ùå NON'}")
    print(f"   Ingr√©dients disponibles: {validation_5['available_count']}/{validation_5['total_ingredients']}")
    
    if validation_5['missing_ingredients']:
        print(f"   Ingr√©dients manquants pour 5 portions:")
        for missing in validation_5['missing_ingredients']:
            print(f"     - {missing['name']}: besoin {missing['needed']} {missing['unit']}, disponible {missing['available']}")
    
    # Test 3: Simulation de pr√©paration (si possible)
    if validation['can_prepare']:
        print(f"\n‚ö° Test 3: Simulation de pr√©paration d'1 portion")
        try:
            user = User.objects.first()
            consumed = recipe.consume_ingredients(quantity=1, user=user)
            print(f"   ‚úÖ Pr√©paration r√©ussie!")
            print(f"   üìã Ingr√©dients consomm√©s:")
            for item in consumed:
                print(f"     - {item['ingredient'].nom}: -{item['quantity_consumed']} {item['ingredient'].unite}")
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la pr√©paration: {e}")
    
    print(f"\nüìä R√©sum√© du co√ªt:")
    print(f"   Co√ªt des ingr√©dients: {recipe.total_cost:.0f} BIF")
    print(f"   Prix de vente: {recipe.plat.selling_price:.0f} BIF")
    print(f"   Marge b√©n√©ficiaire: {recipe.plat.selling_price - recipe.total_cost:.0f} BIF")


if __name__ == '__main__':
    print("üçΩÔ∏è CR√âATION D'UNE RECETTE COMPLEXE")
    print("=" * 50)
    
    print("\n1. Cr√©ation des ingr√©dients suppl√©mentaires...")
    create_additional_ingredients()
    
    print("\n2. Cr√©ation de la recette complexe...")
    recipe = create_complex_recipe()
    
    if recipe:
        print("\n3. Tests de la recette...")
        test_complex_recipe()
    
    print(f"\n‚úÖ Termin√©!")
    print(f"üìä Total ingr√©dients: {Ingredient.objects.count()}")
    print(f"üìù Total recettes: {Recipe.objects.count()}")
