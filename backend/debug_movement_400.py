#!/usr/bin/env python
"""
Script pour d√©boguer l'erreur 400 lors de la cr√©ation de mouvements de stock
"""

import os
import sys
import django
import json

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barstock_api.settings')
django.setup()

from django.contrib.auth import get_user_model
from products.models import Product
from inventory.serializers import StockMovementSerializer
from rest_framework.test import APIRequestFactory
from rest_framework_simplejwt.tokens import RefreshToken

User = get_user_model()

def test_serializer_validation():
    """Tester la validation du serializer directement"""
    print("üîç Test de validation du serializer...")
    
    try:
        # R√©cup√©rer les donn√©es n√©cessaires
        admin_user = User.objects.get(username='admin')
        product = Product.objects.first()
        
        if not product:
            print("‚ùå Aucun produit trouv√©")
            return False
        
        print(f"üì¶ Produit: {product.name} (ID: {product.id})")
        print(f"üë§ Utilisateur: {admin_user.username}")
        
        # Cr√©er une fausse requ√™te pour le contexte
        factory = APIRequestFactory()
        request = factory.post('/api/inventory/movements/')
        request.user = admin_user
        
        # Donn√©es exactement comme envoy√©es par le frontend
        data = {
            'product': product.id,  # ID entier
            'movement_type': 'in',
            'reason': 'purchase',
            'quantity': 10,
            'unit_price': 1500.00,
            'reference': 'TEST-001',
            'notes': 'Test de d√©bogage'
        }
        
        print(f"üì§ Donn√©es de test: {json.dumps(data, indent=2)}")
        
        # Tester le serializer
        serializer = StockMovementSerializer(data=data, context={'request': request})
        
        print(f"üîç Validation: {serializer.is_valid()}")
        
        if not serializer.is_valid():
            print(f"‚ùå Erreurs de validation: {serializer.errors}")
            return False
        
        print("‚úÖ Validation r√©ussie")
        
        # Tenter de sauvegarder
        try:
            movement = serializer.save()
            print(f"‚úÖ Mouvement cr√©√©: {movement.id}")
            
            # V√©rifier le stock mis √† jour
            product.refresh_from_db()
            print(f"üìä Nouveau stock: {product.current_stock}")
            
            return True
            
        except Exception as save_error:
            print(f"‚ùå Erreur lors de la sauvegarde: {save_error}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_field_validation():
    """Tester la validation de chaque champ individuellement"""
    print("\nüîç Test de validation des champs...")
    
    try:
        admin_user = User.objects.get(username='admin')
        product = Product.objects.first()
        
        factory = APIRequestFactory()
        request = factory.post('/api/inventory/movements/')
        request.user = admin_user
        
        # Test des champs un par un
        test_cases = [
            # Cas valide
            {
                'name': 'Cas valide complet',
                'data': {
                    'product': product.id,
                    'movement_type': 'in',
                    'reason': 'purchase',
                    'quantity': 10,
                    'unit_price': 1500.00,
                    'reference': 'TEST-001',
                    'notes': 'Test'
                }
            },
            # Sans unit_price
            {
                'name': 'Sans prix unitaire',
                'data': {
                    'product': product.id,
                    'movement_type': 'in',
                    'reason': 'purchase',
                    'quantity': 10,
                    'reference': 'TEST-002',
                    'notes': 'Test sans prix'
                }
            },
            # Champs minimaux
            {
                'name': 'Champs minimaux',
                'data': {
                    'product': product.id,
                    'movement_type': 'in',
                    'reason': 'purchase',
                    'quantity': 5
                }
            }
        ]
        
        for test_case in test_cases:
            print(f"\nüìã Test: {test_case['name']}")
            print(f"   Donn√©es: {test_case['data']}")
            
            serializer = StockMovementSerializer(data=test_case['data'], context={'request': request})
            
            if serializer.is_valid():
                print("   ‚úÖ Validation r√©ussie")
            else:
                print(f"   ‚ùå Erreurs: {serializer.errors}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des champs: {e}")

def check_database_constraints():
    """V√©rifier les contraintes de base de donn√©es"""
    print("\nüóÑÔ∏è V√©rification des contraintes de base de donn√©es...")
    
    from django.db import connection
    
    try:
        with connection.cursor() as cursor:
            # V√©rifier la structure de la table
            cursor.execute("PRAGMA table_info(inventory_stockmovement);")
            columns = cursor.fetchall()
            
            print("üìã Structure de la table inventory_stockmovement:")
            for col in columns:
                col_name = col[1]
                col_type = col[2]
                not_null = "NOT NULL" if col[3] else "NULL"
                default = f"DEFAULT {col[4]}" if col[4] else ""
                print(f"   {col_name}: {col_type} {not_null} {default}")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification DB: {e}")

def main():
    """Fonction principale"""
    print("üöÄ D√©bogage erreur 400 - StockMovement")
    print("=" * 50)
    
    # V√©rifier les contraintes DB
    check_database_constraints()
    
    # Tester la validation des champs
    test_field_validation()
    
    # Tester le serializer complet
    success = test_serializer_validation()
    
    print("\n" + "=" * 50)
    print("üìä R√©sum√© du d√©bogage:")
    print(f"   Serializer: {'‚úÖ OK' if success else '‚ùå ERREUR'}")
    
    if not success:
        print("\nüí° Suggestions de correction:")
        print("   1. V√©rifiez que tous les champs requis sont fournis")
        print("   2. V√©rifiez les types de donn√©es (int vs string)")
        print("   3. V√©rifiez les contraintes de validation")
        print("   4. V√©rifiez l'authentification de l'utilisateur")

if __name__ == '__main__':
    main()
