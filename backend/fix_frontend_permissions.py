#!/usr/bin/env python
"""
Script pour forcer l'affichage de Sales dans le frontend
en cr√©ant des permissions de test et en v√©rifiant l'API
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barstock_api.settings')
django.setup()

from accounts.models import Permission
import json

def force_create_sales_permissions():
    """Forcer la cr√©ation des permissions Sales avec des donn√©es explicites"""
    print("üîß CR√âATION FORC√âE DES PERMISSIONS SALES")
    print("=" * 45)
    
    # Permissions Sales avec donn√©es explicites
    sales_permissions = [
        {
            'code': 'sales.view',
            'name': 'Voir les ventes',
            'description': 'Acc√®s √† la consultation des ventes',
            'category': 'sales'
        },
        {
            'code': 'sales.create',
            'name': 'Cr√©er des ventes',
            'description': 'Pouvoir effectuer des ventes (POS)',
            'category': 'sales'
        },
        {
            'code': 'sales.history',
            'name': 'Historique des ventes',
            'description': 'Acc√®s √† l\'historique complet des ventes',
            'category': 'sales'
        },
        {
            'code': 'sales.update',
            'name': 'Modifier les ventes',
            'description': 'Pouvoir modifier les ventes existantes',
            'category': 'sales'
        },
        {
            'code': 'sales.delete',
            'name': 'Supprimer les ventes',
            'description': 'Pouvoir supprimer ou annuler des ventes',
            'category': 'sales'
        }
    ]
    
    created_count = 0
    for perm_data in sales_permissions:
        # Supprimer l'ancienne permission si elle existe
        Permission.objects.filter(code=perm_data['code']).delete()
        
        # Cr√©er la nouvelle permission
        permission = Permission.objects.create(
            code=perm_data['code'],
            name=perm_data['name'],
            description=perm_data['description'],
            category=perm_data['category']
        )
        
        print(f"   ‚úÖ Cr√©√©e: {permission.code} - {permission.name}")
        created_count += 1
    
    print(f"\nüìä R√âSULTAT: {created_count} permissions Sales cr√©√©es")
    return created_count > 0

def verify_api_response():
    """V√©rifier la r√©ponse API apr√®s cr√©ation"""
    print(f"\nüîç V√âRIFICATION DE LA R√âPONSE API")
    print("=" * 45)
    
    # Simuler la r√©ponse de l'API /accounts/permissions/list/
    permissions = Permission.objects.all().order_by('category', 'code')
    
    # Format attendu par le frontend
    api_response = []
    for perm in permissions:
        api_response.append({
            'id': perm.id,
            'code': perm.code,
            'name': perm.name,
            'description': perm.description,
            'category': perm.category
        })
    
    # Grouper par cat√©gorie comme le fait le frontend
    grouped = {}
    for perm in api_response:
        category = perm['category'] or 'Autre'
        if category not in grouped:
            grouped[category] = []
        grouped[category].append(perm)
    
    print(f"üìä Total permissions: {len(api_response)}")
    print(f"üìÅ Cat√©gories: {list(grouped.keys())}")
    
    # V√©rifier Sales sp√©cifiquement
    if 'sales' in grouped:
        sales_perms = grouped['sales']
        print(f"\n‚úÖ SALES TROUV√â!")
        print(f"   ‚Ä¢ Nombre de permissions: {len(sales_perms)}")
        for perm in sales_perms:
            print(f"      - {perm['code']} - {perm['name']}")
        
        # Cr√©er un exemple de r√©ponse JSON
        print(f"\nüì§ EXEMPLE R√âPONSE API:")
        sample_response = {
            'count': len(api_response),
            'results': api_response[:10]  # 10 premiers exemples
        }
        
        # Afficher juste les permissions Sales
        sales_only = [p for p in api_response if p['category'] == 'sales']
        print(f"üìã Permissions Sales pour le frontend:")
        print(json.dumps(sales_only, indent=2, ensure_ascii=False))
        
        return True
    else:
        print(f"\n‚ùå SALES NON TROUV√â")
        return False

def test_frontend_grouping_logic():
    """Tester la logique de groupement du frontend"""
    print(f"\nüé® TEST DE LA LOGIQUE FRONTEND")
    print("=" * 45)
    
    # R√©cup√©rer les permissions comme le ferait usePermissions()
    permissions = Permission.objects.all()
    permissions_data = []
    
    for perm in permissions:
        permissions_data.append({
            'id': perm.id,
            'code': perm.code,
            'name': perm.name,
            'description': perm.description,
            'category': perm.category
        })
    
    print(f"üìã Donn√©es r√©cup√©r√©es: {len(permissions_data)} permissions")
    
    # Reproduire exactement le code de Users.tsx (lignes 437-443)
    grouped_permissions = permissions_data.reduce(lambda acc, permission: {
        **acc,
        permission['category'] or 'Autre': [
            *(acc.get(permission['category'] or 'Autre', [])),
            permission
        ]
    }, {})
    
    # Version Python √©quivalente
    grouped_permissions_py = {}
    for permission in permissions_data:
        category = permission['category'] or 'Autre'
        if category not in grouped_permissions_py:
            grouped_permissions_py[category] = []
        grouped_permissions_py[category].append(permission)
    
    print(f"\nüîÑ GROUPEMENT FRONTEND (Python):")
    for category, perms in grouped_permissions_py.items():
        print(f"   üìÅ {category.upper()}: {len(perms)} permissions")
        if category == 'sales':
            print(f"      ‚úÖ SALES SERA VISIBLE!")
    
    return 'sales' in grouped_permissions_py

def create_minimal_test_case():
    """Cr√©er un cas de test minimal pour le frontend"""
    print(f"\nüß™ CAS DE TEST MINIMAL")
    print("=" * 45)
    
    # Supprimer toutes les permissions existantes
    Permission.objects.all().delete()
    print("   üóëÔ∏è  Toutes les permissions supprim√©es")
    
    # Cr√©er seulement quelques permissions de test
    test_permissions = [
        {
            'code': 'sales.view',
            'name': 'Voir les ventes',
            'description': 'Test permission',
            'category': 'sales'
        },
        {
            'code': 'users.view',
            'name': 'Voir les utilisateurs',
            'description': 'Test permission',
            'category': 'users'
        }
    ]
    
    for perm_data in test_permissions:
        Permission.objects.create(**perm_data)
        print(f"   ‚úÖ Cr√©√©e: {perm_data['code']} ({perm_data['category']})")
    
    # V√©rifier le r√©sultat
    all_perms = Permission.objects.all()
    categories = set(p.category for p in all_perms)
    
    print(f"\nüìä R√âSULTAT MINIMAL:")
    print(f"   ‚Ä¢ Total permissions: {all_perms.count()}")
    print(f"   ‚Ä¢ Cat√©gories: {list(categories)}")
    print(f"   ‚Ä¢ Sales pr√©sent: {'‚úÖ OUI' if 'sales' in categories else '‚ùå NON'}")
    
    return 'sales' in categories

def main():
    """Fonction principale de correction"""
    print("üöÄ CORRECTION FORC√âE - PERMISSIONS SALES FRONTEND")
    print("Forcer l'affichage de Sales dans le formulaire")
    print()
    
    # 1. Cr√©er un cas de test minimal
    print("1Ô∏è‚É£ Cr√©ation d'un cas de test minimal...")
    minimal_success = create_minimal_test_case()
    
    if minimal_success:
        print("   ‚úÖ Cas minimal cr√©√© avec succ√®s")
    else:
        print("   ‚ùå √âchec du cas minimal")
        return
    
    # 2. Cr√©er toutes les permissions Sales
    print("\n2Ô∏è‚É£ Cr√©ation compl√®te des permissions Sales...")
    sales_created = force_create_sales_permissions()
    
    # 3. V√©rifier la r√©ponse API
    print("\n3Ô∏è‚É£ V√©rification de l'API...")
    api_ok = verify_api_response()
    
    # 4. Tester la logique frontend
    print("\n4Ô∏è‚É£ Test de la logique frontend...")
    frontend_ok = test_frontend_grouping_logic()
    
    # 5. R√©sum√© final
    print(f"\n" + "=" * 45)
    print(f"üìã R√âSUM√â DE LA CORRECTION:")
    
    print(f"   ‚Ä¢ Cas minimal: {'‚úÖ Succ√®s' if minimal_success else '‚ùå √âchec'}")
    print(f"   ‚Ä¢ Permissions Sales: {'‚úÖ Cr√©√©es' if sales_created else '‚ùå √âchec'}")
    print(f"   ‚Ä¢ API Response: {'‚úÖ OK' if api_ok else '‚ùå Probl√®me'}")
    print(f"   ‚Ä¢ Frontend Logic: {'‚úÖ OK' if frontend_ok else '‚ùå Probl√®me'}")
    
    if all([minimal_success, sales_created, api_ok, frontend_ok]):
        print(f"\nüéâ CORRECTION R√âUSSIE!")
        print(f"‚úÖ Sales devrait maintenant appara√Ætre dans le frontend")
        print(f"\nüîÑ ACTIONS REQUISES:")
        print(f"1. Red√©marrer le serveur Django: python manage.py runserver")
        print(f"2. Actualiser compl√®tement le navigateur (Ctrl+Shift+R)")
        print(f"3. Aller dans Utilisateurs > Nouvel utilisateur")
        print(f"4. V√©rifier que 'SALES' appara√Æt dans les permissions")
    else:
        print(f"\n‚ö†Ô∏è  CORRECTION PARTIELLE")
        print(f"V√©rifiez les logs ci-dessus pour identifier les probl√®mes")

if __name__ == '__main__':
    main()
