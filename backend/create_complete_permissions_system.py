#!/usr/bin/env python
"""
Script pour cr√©er un syst√®me complet de permissions pour le dialog de cr√©ation d'utilisateur
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barstock_api.settings')
django.setup()

from accounts.models import Permission

def create_complete_permission_system():
    """Cr√©er toutes les permissions recommand√©es organis√©es par cat√©gories"""
    print("üöÄ CR√âATION DU SYST√àME COMPLET DE PERMISSIONS")
    print("=" * 60)
    
    # D√©finition compl√®te des permissions par cat√©gorie
    permissions_data = {
        "dashboard": [
            ("dashboard.view", "Voir le tableau de bord", "Acc√©der √† la page d'accueil et vue d'ensemble"),
        ],
        
        "users": [
            ("users.view", "Voir les utilisateurs", "Consulter la liste des utilisateurs"),
            ("users.create", "Cr√©er des utilisateurs", "Ajouter de nouveaux utilisateurs"),
            ("users.update", "Modifier les utilisateurs", "Modifier les informations utilisateur"),
            ("users.delete", "Supprimer les utilisateurs", "Supprimer des comptes utilisateur"),
            ("users.activate", "Activer/D√©sactiver", "G√©rer le statut actif des utilisateurs"),
            ("users.reset_password", "R√©initialiser mot de passe", "R√©initialiser les mots de passe"),
            ("users.assign_permissions", "Attribuer permissions", "G√©rer les permissions utilisateur"),
            ("users.view_activities", "Voir activit√©s", "Consulter l'historique des activit√©s"),
        ],
        
        "sales": [
            ("sales.view", "Voir les ventes", "Consulter les ventes et transactions"),
            ("sales.create", "Cr√©er des ventes", "Effectuer des ventes"),
            ("sales.update", "Modifier les ventes", "Modifier des ventes existantes"),
            ("sales.delete", "Supprimer les ventes", "Annuler/supprimer des ventes"),
            ("sales.approve", "Approuver les ventes", "Valider des ventes importantes"),
            ("sales.refund", "Rembourser", "Effectuer des remboursements"),
            ("sales.discount", "Appliquer remises", "G√©rer les remises et promotions"),
        ],
        
        "finances": [
            ("finances.view", "Voir les finances", "Consulter les donn√©es financi√®res"),
            ("finances.reports", "Rapports financiers", "G√©n√©rer des rapports financiers"),
            ("finances.export", "Exporter donn√©es", "Exporter les donn√©es financi√®res"),
            ("finances.history", "Historique des ventes", "Consulter l'historique des transactions"),
            ("finances.analytics", "Analyses financi√®res", "Acc√©der aux analyses avanc√©es"),
            ("finances.budgets", "G√©rer budgets", "Configurer et suivre les budgets"),
            ("finances.expenses", "G√©rer d√©penses", "G√©rer les d√©penses et frais"),
            ("finances.taxes", "Gestion fiscale", "G√©rer les taxes et d√©clarations"),
        ],
        
        "products": [
            ("products.view", "Voir les produits", "Consulter le catalogue produits"),
            ("products.create", "Cr√©er produits", "Ajouter de nouveaux produits"),
            ("products.update", "Modifier produits", "Modifier les produits existants"),
            ("products.delete", "Supprimer produits", "Retirer des produits du catalogue"),
            ("products.categories", "G√©rer cat√©gories", "Organiser les cat√©gories de produits"),
            ("products.pricing", "G√©rer prix", "Modifier les prix et tarifications"),
            ("products.import", "Importer produits", "Importer des produits en masse"),
            ("products.export", "Exporter produits", "Exporter le catalogue"),
            ("products.audit", "Audit produits", "Auditer les produits et leur historique"),
        ],
        
        "inventory": [
            ("inventory.view", "Voir l'inventaire", "Consulter les stocks"),
            ("inventory.create", "Ajouter au stock", "Ajouter de nouveaux √©l√©ments au stock"),
            ("inventory.update", "Modifier stock", "Modifier les informations de stock"),
            ("inventory.delete", "Supprimer du stock", "Retirer des √©l√©ments du stock"),
            ("inventory.adjust", "Ajuster stocks", "Corriger les quantit√©s en stock"),
            ("inventory.transfer", "Transf√©rer stocks", "D√©placer des stocks entre emplacements"),
            ("inventory.alerts", "Alertes stock", "G√©rer les alertes de stock bas"),
            ("inventory.audit", "Audit inventaire", "Effectuer des audits d'inventaire"),
            ("inventory.sync", "Synchroniser stocks", "Synchroniser les donn√©es de stock"),
        ],
        
        "orders": [
            ("orders.view", "Voir les commandes", "Consulter les commandes"),
            ("orders.create", "Cr√©er commandes", "Passer de nouvelles commandes"),
            ("orders.update", "Modifier commandes", "Modifier des commandes existantes"),
            ("orders.delete", "Supprimer commandes", "Annuler des commandes"),
            ("orders.approve", "Approuver commandes", "Valider des commandes importantes"),
            ("orders.fulfill", "Traiter commandes", "Marquer comme trait√©es"),
            ("orders.track", "Suivre commandes", "Suivre le statut des commandes"),
        ],
        
        "kitchen": [
            ("kitchen.view", "Voir cuisine", "Acc√©der √† l'interface cuisine"),
            ("kitchen.orders", "G√©rer commandes", "Traiter les commandes cuisine"),
            ("kitchen.recipes", "G√©rer recettes", "Modifier les recettes et compositions"),
            ("kitchen.prep", "Gestion pr√©paration", "Organiser la pr√©paration"),
            ("kitchen.inventory", "Stock cuisine", "G√©rer les stocks cuisine"),
            ("kitchen.equipment", "√âquipements", "G√©rer les √©quipements cuisine"),
        ],
        
        "tables": [
            ("tables.view", "Voir les tables", "Consulter l'√©tat des tables"),
            ("tables.manage", "G√©rer tables", "Ouvrir/fermer des tables"),
            ("tables.assign", "Attribuer tables", "Assigner des serveurs aux tables"),
            ("tables.reservations", "R√©servations", "G√©rer les r√©servations"),
            ("tables.layout", "Configuration", "Modifier la disposition des tables"),
        ],
        
        "supplies": [
            ("supplies.view", "Voir fournitures", "Consulter les fournitures"),
            ("supplies.create", "Ajouter fournitures", "Ajouter de nouvelles fournitures"),
            ("supplies.update", "Modifier fournitures", "Modifier les fournitures"),
            ("supplies.delete", "Supprimer fournitures", "Retirer des fournitures"),
            ("supplies.order", "Commander", "Passer des commandes fournisseurs"),
            ("supplies.receive", "R√©ceptionner", "R√©ceptionner les livraisons"),
            ("supplies.audit", "Audit fournitures", "Auditer les fournitures"),
        ],
        
        "suppliers": [
            ("suppliers.view", "Voir fournisseurs", "Consulter les fournisseurs"),
            ("suppliers.create", "Cr√©er fournisseurs", "Ajouter de nouveaux fournisseurs"),
            ("suppliers.update", "Modifier fournisseurs", "Modifier les fournisseurs"),
            ("suppliers.delete", "Supprimer fournisseurs", "Retirer des fournisseurs"),
            ("suppliers.manage", "G√©rer relations", "G√©rer les relations fournisseurs"),
        ],
        
        "reports": [
            ("reports.view", "Voir rapports", "Consulter les rapports"),
            ("reports.create", "Cr√©er rapports", "G√©n√©rer de nouveaux rapports"),
            ("reports.export", "Exporter rapports", "Exporter les rapports"),
            ("reports.schedule", "Programmer rapports", "Automatiser la g√©n√©ration"),
            ("reports.analytics", "Analyses avanc√©es", "Acc√©der aux analyses d√©taill√©es"),
            ("reports.dashboard", "Tableaux de bord", "Configurer les dashboards"),
            ("reports.daily", "Rapport quotidien", "G√©n√©rer le rapport quotidien"),
        ],
        
        "analytics": [
            ("analytics.view", "Voir analyses", "Consulter les analyses"),
            ("analytics.sales", "Analyses ventes", "Analyser les performances de vente"),
            ("analytics.customers", "Analyses clients", "Analyser le comportement client"),
            ("analytics.products", "Analyses produits", "Analyser les performances produits"),
            ("analytics.financial", "Analyses financi√®res", "Analyser la sant√© financi√®re"),
            ("analytics.predictive", "Analyses pr√©dictives", "Acc√©der aux pr√©dictions"),
        ],
        
        "settings": [
            ("settings.view", "Voir param√®tres", "Consulter la configuration"),
            ("settings.update", "Modifier param√®tres", "Modifier la configuration syst√®me"),
            ("settings.backup", "Sauvegardes", "G√©rer les sauvegardes"),
            ("settings.restore", "Restaurations", "Restaurer des sauvegardes"),
            ("settings.integrations", "Int√©grations", "Configurer les int√©grations externes"),
            ("settings.notifications", "Notifications", "Configurer les notifications"),
            ("settings.security", "S√©curit√©", "G√©rer les param√®tres de s√©curit√©"),
        ],
        
        "monitoring": [
            ("monitoring.view", "Voir monitoring", "Consulter les m√©triques syst√®me"),
            ("monitoring.logs", "Voir logs", "Acc√©der aux journaux syst√®me"),
            ("monitoring.performance", "Performance", "Surveiller les performances"),
            ("monitoring.errors", "Gestion erreurs", "G√©rer les erreurs syst√®me"),
            ("monitoring.alerts", "Alertes syst√®me", "Configurer les alertes"),
        ],
        
        "alerts": [
            ("alerts.view", "Voir alertes", "Consulter les alertes"),
            ("alerts.create", "Cr√©er alertes", "Configurer de nouvelles alertes"),
            ("alerts.update", "Modifier alertes", "Modifier les alertes existantes"),
            ("alerts.delete", "Supprimer alertes", "Retirer des alertes"),
            ("alerts.acknowledge", "Acquitter", "Marquer les alertes comme vues"),
            ("alerts.escalate", "Escalader", "Escalader des alertes critiques"),
        ],
        
        "audit": [
            ("audit.view", "Voir audits", "Consulter les journaux d'audit"),
            ("audit.export", "Exporter audits", "Exporter les donn√©es d'audit"),
            ("audit.configure", "Configurer audit", "Param√©trer l'audit syst√®me"),
            ("audit.compliance", "Conformit√©", "G√©rer la conformit√© r√©glementaire"),
        ],
        
        "help": [
            ("help.view", "Voir aide", "Acc√©der √† la documentation"),
            ("help.support", "Support", "Contacter le support technique"),
            ("help.training", "Formation", "Acc√©der aux ressources de formation"),
        ],
        
        "profile": [
            ("profile.view", "Voir profil", "Consulter son profil personnel"),
            ("profile.update", "Modifier profil", "Modifier ses informations personnelles"),
        ]
    }
    
    # Statistiques
    total_permissions = sum(len(perms) for perms in permissions_data.values())
    print(f"üìä CR√âATION DE {total_permissions} PERMISSIONS DANS {len(permissions_data)} CAT√âGORIES")
    
    # Supprimer toutes les permissions existantes pour repartir √† z√©ro
    print(f"\nüóëÔ∏è  NETTOYAGE DES PERMISSIONS EXISTANTES...")
    deleted_count = Permission.objects.all().delete()[0]
    print(f"   ‚úÖ {deleted_count} permissions supprim√©es")
    
    # Cr√©er toutes les nouvelles permissions
    print(f"\n‚ûï CR√âATION DES NOUVELLES PERMISSIONS...")
    created_count = 0
    
    for category, permissions in permissions_data.items():
        print(f"\nüîπ Cat√©gorie: {category.upper()}")
        
        for code, name, description in permissions:
            try:
                Permission.objects.create(
                    code=code,
                    name=name,
                    description=description,
                    category=category,
                    is_active=True
                )
                print(f"   ‚úÖ {code} - {name}")
                created_count += 1
            except Exception as e:
                print(f"   ‚ùå Erreur {code}: {str(e)}")
    
    print(f"\nüìà R√âSUM√â CR√âATION:")
    print(f"   ‚Ä¢ Permissions cr√©√©es: {created_count}")
    print(f"   ‚Ä¢ Cat√©gories: {len(permissions_data)}")
    
    return created_count == total_permissions

def verify_permissions_in_database():
    """V√©rifier que toutes les permissions sont bien cr√©√©es"""
    print(f"\n‚úÖ V√âRIFICATION EN BASE DE DONN√âES")
    print("=" * 60)
    
    all_permissions = Permission.objects.all().order_by('category', 'code')
    
    # Grouper par cat√©gorie
    categories = {}
    for perm in all_permissions:
        cat = perm.category
        if cat not in categories:
            categories[cat] = []
        categories[cat].append(perm)
    
    print(f"üìä PERMISSIONS EN BASE:")
    print(f"   ‚Ä¢ Total: {all_permissions.count()}")
    print(f"   ‚Ä¢ Cat√©gories: {len(categories)}")
    print(f"   ‚Ä¢ Actives: {all_permissions.filter(is_active=True).count()}")
    
    print(f"\nüìã D√âTAIL PAR CAT√âGORIE:")
    for cat, perms in sorted(categories.items()):
        print(f"   üîπ {cat.upper()}: {len(perms)} permissions")
        for perm in perms[:3]:  # Montrer les 3 premi√®res
            print(f"      ‚Ä¢ {perm.code} - {perm.name}")
        if len(perms) > 3:
            print(f"      ... et {len(perms) - 3} autres")
    
    return len(categories) > 0

def test_api_response():
    """Tester que l'API retourne toutes les permissions"""
    print(f"\nüåê TEST API PERMISSIONS")
    print("=" * 60)
    
    import requests
    
    try:
        # Login admin
        login_url = "http://127.0.0.1:8000/api/auth/login/"
        login_data = {"username": "admin", "password": "admin"}
        
        login_response = requests.post(login_url, json=login_data, timeout=10)
        if login_response.status_code != 200:
            print(f"‚ùå √âchec login: {login_response.status_code}")
            return False
        
        token_data = login_response.json()
        token = token_data.get('access_token') or token_data.get('access')
        
        # Test API permissions
        permissions_url = "http://127.0.0.1:8000/accounts/permissions/list/"
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.get(permissions_url, headers=headers, timeout=10)
        print(f"üì° Status API: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            permissions = data.get('results', data) if isinstance(data, dict) else data
            
            # Grouper par cat√©gorie
            api_categories = {}
            for perm in permissions:
                cat = perm.get('category', 'Autre')
                if cat not in api_categories:
                    api_categories[cat] = []
                api_categories[cat].append(perm)
            
            print(f"üìä R√âPONSE API:")
            print(f"   ‚Ä¢ Permissions: {len(permissions)}")
            print(f"   ‚Ä¢ Cat√©gories: {len(api_categories)}")
            
            print(f"\nüìÅ CAT√âGORIES DANS L'API:")
            for cat, perms in sorted(api_categories.items()):
                print(f"   üîπ {cat}: {len(perms)} permissions")
            
            return len(api_categories) > 15  # Au moins 15 cat√©gories
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def create_default_user_with_permissions():
    """Cr√©er un utilisateur de test avec quelques permissions"""
    print(f"\nüë§ CR√âATION UTILISATEUR DE TEST")
    print("=" * 60)
    
    from django.contrib.auth.hashers import make_password
    from accounts.models import User, UserPermission
    
    # Cr√©er ou r√©cup√©rer l'utilisateur test
    username = "testuser_complete"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'email': 'test@example.com',
            'first_name': 'Test',
            'last_name': 'User',
            'password': make_password('temp123456'),
            'is_active': True
        }
    )
    
    if created:
        print(f"‚úÖ Utilisateur cr√©√©: {username}")
    else:
        print(f"‚úÖ Utilisateur existant: {username}")
    
    # Attribuer quelques permissions de test
    test_permissions = [
        'dashboard.view',
        'users.view',
        'sales.view', 'sales.create',
        'products.view', 'products.create',
        'inventory.view',
        'reports.view',
        'help.view'
    ]
    
    # Supprimer les anciennes permissions
    UserPermission.objects.filter(user=user).delete()
    
    # Ajouter les nouvelles permissions
    assigned_count = 0
    for perm_code in test_permissions:
        try:
            permission = Permission.objects.get(code=perm_code)
            UserPermission.objects.create(user=user, permission=permission)
            assigned_count += 1
        except Permission.DoesNotExist:
            print(f"   ‚ö†Ô∏è  Permission non trouv√©e: {perm_code}")
    
    print(f"   üîë {assigned_count} permissions attribu√©es")
    return user

def main():
    """Fonction principale"""
    print("üöÄ CR√âATION SYST√àME COMPLET DE PERMISSIONS")
    print("Pour le dialog de cr√©ation d'utilisateur BarStockWise")
    print()
    
    # 1. Cr√©er toutes les permissions
    success = create_complete_permission_system()
    
    if success:
        # 2. V√©rifier en base
        db_ok = verify_permissions_in_database()
        
        # 3. Tester l'API
        api_ok = test_api_response()
        
        # 4. Cr√©er un utilisateur de test
        test_user = create_default_user_with_permissions()
        
        # 5. R√©sum√© final
        print(f"\n" + "=" * 60)
        print(f"üìã R√âSUM√â FINAL:")
        print(f"   ‚Ä¢ Cr√©ation permissions: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
        print(f"   ‚Ä¢ Base de donn√©es: {'‚úÖ OK' if db_ok else '‚ùå PROBL√àME'}")
        print(f"   ‚Ä¢ API fonctionnelle: {'‚úÖ OK' if api_ok else '‚ùå PROBL√àME'}")
        print(f"   ‚Ä¢ Utilisateur test: {'‚úÖ CR√â√â' if test_user else '‚ùå √âCHEC'}")
        
        if success and db_ok and api_ok:
            print(f"\nüéâ SYST√àME COMPLET CR√â√â AVEC SUCC√àS!")
            print(f"‚úÖ Toutes les permissions sont disponibles dans le dialog")
            print(f"‚úÖ Organis√©es en {len(Permission.objects.values('category').distinct())} cat√©gories")
            print(f"‚úÖ Actualisez le frontend pour voir toutes les permissions")
            print(f"\nüí° UTILISATEUR DE TEST:")
            print(f"   ‚Ä¢ Username: testuser_complete")
            print(f"   ‚Ä¢ Password: temp123456")
        else:
            print(f"\n‚ùå PROBL√àMES D√âTECT√âS - V√©rifiez les logs ci-dessus")
    else:
        print(f"\n‚ùå √âCHEC DE LA CR√âATION DES PERMISSIONS")

if __name__ == '__main__':
    main()
