#!/usr/bin/env python
"""
Script pour cr√©er les permissions bas√©es sur les pages r√©ellement utilis√©es dans App.tsx
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barstock_api.settings')
django.setup()

from accounts.models import Permission

def create_permissions_for_actual_pages():
    """Cr√©er les permissions bas√©es sur les pages r√©ellement d√©finies dans App.tsx"""
    print("üöÄ CR√âATION PERMISSIONS BAS√âES SUR LES PAGES R√âELLES")
    print("=" * 60)
    
    # Pages r√©ellement d√©finies dans App.tsx avec leurs permissions
    actual_pages_permissions = {
        "dashboard": [
            ("dashboard.view", "Voir le tableau de bord", "Acc√©der √† la page d'accueil et vue d'ensemble"),
        ],
        
        "users": [
            ("users.view", "Voir les utilisateurs", "Consulter la liste des utilisateurs"),
            ("users.create", "Cr√©er des utilisateurs", "Ajouter de nouveaux utilisateurs"),
            ("users.update", "Modifier les utilisateurs", "Modifier les informations utilisateur"),
            ("users.delete", "Supprimer les utilisateurs", "Supprimer des comptes utilisateur"),
            ("users.assign_permissions", "Attribuer permissions", "G√©rer les permissions utilisateur"),
            ("users.reset_password", "R√©initialiser mot de passe", "R√©initialiser les mots de passe"),
        ],
        
        "profile": [
            ("profile.view", "Voir profil", "Consulter son profil personnel"),
            ("profile.update", "Modifier profil", "Modifier ses informations personnelles"),
        ],
        
        "products": [
            ("products.view", "Voir les produits", "Consulter le catalogue produits"),
            ("products.create", "Cr√©er produits", "Ajouter de nouveaux produits"),
            ("products.update", "Modifier produits", "Modifier les produits existants"),
            ("products.delete", "Supprimer produits", "Retirer des produits du catalogue"),
            ("products.pricing", "G√©rer prix", "Modifier les prix et tarifications"),
        ],
        
        "sales": [
            ("sales.view", "Voir les ventes", "Consulter les ventes et transactions"),
            ("sales.create", "Cr√©er des ventes", "Effectuer des ventes"),
            ("sales.update", "Modifier les ventes", "Modifier des ventes existantes"),
            ("sales.delete", "Supprimer les ventes", "Annuler/supprimer des ventes"),
            ("sales.refund", "Rembourser", "Effectuer des remboursements"),
        ],
        
        "stocks": [
            ("stocks.view", "Voir les stocks", "Consulter l'√©tat des stocks"),
            ("stocks.update", "Modifier stocks", "Ajuster les quantit√©s en stock"),
            ("stocks.adjust", "Ajuster stocks", "Corriger les niveaux de stock"),
            ("stocks.alerts", "Alertes stock", "G√©rer les alertes de stock bas"),
        ],
        
        "supplies": [
            ("supplies.view", "Voir fournitures", "Consulter les fournitures"),
            ("supplies.create", "Ajouter fournitures", "Ajouter de nouvelles fournitures"),
            ("supplies.update", "Modifier fournitures", "Modifier les fournitures"),
            ("supplies.order", "Commander", "Passer des commandes fournisseurs"),
        ],
        
        "suppliers": [
            ("suppliers.view", "Voir fournisseurs", "Consulter les fournisseurs"),
            ("suppliers.create", "Cr√©er fournisseurs", "Ajouter de nouveaux fournisseurs"),
            ("suppliers.update", "Modifier fournisseurs", "Modifier les fournisseurs"),
            ("suppliers.manage", "G√©rer relations", "G√©rer les relations fournisseurs"),
        ],
        
        "kitchen": [
            ("kitchen.view", "Voir cuisine", "Acc√©der √† l'interface cuisine"),
            ("kitchen.orders", "G√©rer commandes", "Traiter les commandes cuisine"),
            ("kitchen.prep", "Gestion pr√©paration", "Organiser la pr√©paration"),
        ],
        
        "tables": [
            ("tables.view", "Voir les tables", "Consulter l'√©tat des tables"),
            ("tables.manage", "G√©rer tables", "Ouvrir/fermer des tables"),
            ("tables.reservations", "R√©servations", "G√©rer les r√©servations"),
        ],
        
        "orders": [
            ("orders.view", "Voir les commandes", "Consulter les commandes"),
            ("orders.create", "Cr√©er commandes", "Passer de nouvelles commandes"),
            ("orders.update", "Modifier commandes", "Modifier des commandes existantes"),
            ("orders.fulfill", "Traiter commandes", "Marquer comme trait√©es"),
        ],
        
        "finances": [
            ("finances.view", "Voir les finances", "Consulter les donn√©es financi√®res"),
            ("finances.history", "Historique des ventes", "Consulter l'historique des transactions"),
            ("finances.reports", "Rapports financiers", "G√©n√©rer des rapports financiers"),
            ("finances.expenses", "G√©rer d√©penses", "G√©rer les d√©penses et frais"),
            ("finances.daily_report", "Rapport quotidien", "Consulter le rapport quotidien"),
        ],
        
        "reports": [
            ("reports.view", "Voir rapports", "Consulter les rapports"),
            ("reports.create", "Cr√©er rapports", "G√©n√©rer de nouveaux rapports"),
            ("reports.export", "Exporter rapports", "Exporter les rapports"),
            ("reports.daily", "Rapport quotidien", "G√©n√©rer le rapport quotidien"),
        ],
        
        "analytics": [
            ("analytics.view", "Voir analyses", "Consulter les analyses"),
            ("analytics.sales", "Analyses ventes", "Analyser les performances de vente"),
            ("analytics.financial", "Analyses financi√®res", "Analyser la sant√© financi√®re"),
        ],
        
        "settings": [
            ("settings.view", "Voir param√®tres", "Consulter la configuration"),
            ("settings.update", "Modifier param√®tres", "Modifier la configuration syst√®me"),
            ("settings.security", "S√©curit√©", "G√©rer les param√®tres de s√©curit√©"),
        ],
        
        "alerts": [
            ("alerts.view", "Voir alertes", "Consulter les alertes"),
            ("alerts.create", "Cr√©er alertes", "Configurer de nouvelles alertes"),
            ("alerts.acknowledge", "Acquitter", "Marquer les alertes comme vues"),
        ],
        
        "monitoring": [
            ("monitoring.view", "Voir monitoring", "Consulter les m√©triques syst√®me"),
            ("monitoring.logs", "Voir logs", "Acc√©der aux journaux syst√®me"),
            ("monitoring.alerts", "Alertes syst√®me", "Configurer les alertes"),
        ],
        
        "help": [
            ("help.view", "Voir aide", "Acc√©der √† la documentation"),
            ("help.support", "Support", "Contacter le support technique"),
        ]
    }
    
    # Statistiques
    total_permissions = sum(len(perms) for perms in actual_pages_permissions.values())
    print(f"üìä CR√âATION DE {total_permissions} PERMISSIONS POUR {len(actual_pages_permissions)} PAGES R√âELLES")
    
    # Supprimer toutes les permissions existantes
    print(f"\nüóëÔ∏è  NETTOYAGE DES PERMISSIONS EXISTANTES...")
    deleted_count = Permission.objects.all().delete()[0]
    print(f"   ‚úÖ {deleted_count} permissions supprim√©es")
    
    # Cr√©er les nouvelles permissions
    print(f"\n‚ûï CR√âATION DES PERMISSIONS POUR LES PAGES R√âELLES...")
    created_count = 0
    
    for category, permissions in actual_pages_permissions.items():
        print(f"\nüîπ {category.upper()} ({len(permissions)} permissions)")
        
        for code, name, description in permissions:
            try:
                Permission.objects.create(
                    code=code,
                    name=name,
                    description=description,
                    category=category,
                    is_active=True
                )
                print(f"   ‚úÖ {code} - {name}")
                created_count += 1
            except Exception as e:
                print(f"   ‚ùå Erreur {code}: {str(e)}")
    
    print(f"\nüìà R√âSUM√â CR√âATION:")
    print(f"   ‚Ä¢ Permissions cr√©√©es: {created_count}")
    print(f"   ‚Ä¢ Pages couvertes: {len(actual_pages_permissions)}")
    
    return created_count == total_permissions

def verify_permissions_match_routes():
    """V√©rifier que les permissions correspondent aux routes d√©finies"""
    print(f"\n‚úÖ V√âRIFICATION CORRESPONDANCE ROUTES ‚Üí PERMISSIONS")
    print("=" * 60)
    
    # Routes d√©finies dans App.tsx
    actual_routes = [
        "/", "/dashboard",  # Index/Dashboard
        "/profile",         # Profile
        "/products",        # Products
        "/sales",           # Sales
        "/stocks",          # Stocks
        "/stock-sync",      # StockSync (stocks)
        "/supplies",        # Supplies
        "/kitchen",         # Kitchen
        "/sales-history",   # SalesHistory (finances)
        "/daily-report",    # DailyReport (finances)
        "/reports",         # Reports
        "/analytics",       # Analytics
        "/tables",          # Tables
        "/orders",          # Orders
        "/users",           # Users
        "/suppliers",       # Suppliers
        "/expenses",        # Expenses (finances)
        "/settings",        # Settings
        "/alerts",          # Alerts
        "/monitoring",      # Monitoring
        "/help"             # Help
    ]
    
    # Permissions cr√©√©es par cat√©gorie
    permission_categories = Permission.objects.values_list('category', flat=True).distinct()
    
    print(f"üìä CORRESPONDANCE:")
    print(f"   ‚Ä¢ Routes d√©finies: {len(actual_routes)}")
    print(f"   ‚Ä¢ Cat√©gories permissions: {len(permission_categories)}")
    
    print(f"\nüìã ROUTES ET LEURS PERMISSIONS:")
    route_permission_mapping = {
        "/": "dashboard",
        "/dashboard": "dashboard",
        "/profile": "profile",
        "/products": "products",
        "/sales": "sales",
        "/stocks": "stocks",
        "/stock-sync": "stocks",
        "/supplies": "supplies",
        "/kitchen": "kitchen",
        "/sales-history": "finances",
        "/daily-report": "finances",
        "/reports": "reports",
        "/analytics": "analytics",
        "/tables": "tables",
        "/orders": "orders",
        "/users": "users",
        "/suppliers": "suppliers",
        "/expenses": "finances",
        "/settings": "settings",
        "/alerts": "alerts",
        "/monitoring": "monitoring",
        "/help": "help"
    }
    
    for route, category in route_permission_mapping.items():
        perms_count = Permission.objects.filter(category=category).count()
        print(f"   üîó {route} ‚Üí {category} ({perms_count} permissions)")
    
    return True

def test_api_with_actual_permissions():
    """Tester l'API avec les permissions r√©elles"""
    print(f"\nüåê TEST API AVEC PERMISSIONS R√âELLES")
    print("=" * 60)
    
    import requests
    
    try:
        # Login admin
        login_url = "http://127.0.0.1:8000/api/auth/login/"
        login_data = {"username": "admin", "password": "admin"}
        
        login_response = requests.post(login_url, json=login_data, timeout=10)
        if login_response.status_code != 200:
            print(f"‚ùå √âchec login: {login_response.status_code}")
            return False
        
        token_data = login_response.json()
        token = token_data.get('access_token') or token_data.get('access')
        
        # Test API permissions
        permissions_url = "http://127.0.0.1:8000/accounts/permissions/list/"
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.get(permissions_url, headers=headers, timeout=10)
        print(f"üì° Status API: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            permissions = data.get('results', data) if isinstance(data, dict) else data
            
            # Grouper par cat√©gorie
            api_categories = {}
            for perm in permissions:
                cat = perm.get('category', 'Autre')
                if cat not in api_categories:
                    api_categories[cat] = []
                api_categories[cat].append(perm)
            
            print(f"üìä R√âPONSE API:")
            print(f"   ‚Ä¢ Permissions: {len(permissions)}")
            print(f"   ‚Ä¢ Cat√©gories: {len(api_categories)}")
            
            print(f"\nüìÅ CAT√âGORIES DISPONIBLES POUR LE FRONTEND:")
            for cat, perms in sorted(api_categories.items()):
                print(f"   üîπ {cat.upper()}: {len(perms)} permissions")
                # Montrer quelques permissions
                for perm in perms[:2]:
                    print(f"      ‚Ä¢ {perm.get('name')}")
                if len(perms) > 2:
                    print(f"      ... et {len(perms) - 2} autres")
            
            return len(api_categories) >= 15
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ CR√âATION PERMISSIONS BAS√âES SUR LES PAGES R√âELLES")
    print("Analyse de App.tsx pour cr√©er uniquement les permissions n√©cessaires")
    print()
    
    # 1. Cr√©er les permissions pour les pages r√©elles
    success = create_permissions_for_actual_pages()
    
    if success:
        # 2. V√©rifier la correspondance routes ‚Üí permissions
        mapping_ok = verify_permissions_match_routes()
        
        # 3. Tester l'API
        api_ok = test_api_with_actual_permissions()
        
        # 4. R√©sum√© final
        print(f"\n" + "=" * 60)
        print(f"üìã R√âSUM√â FINAL:")
        print(f"   ‚Ä¢ Cr√©ation permissions: {'‚úÖ SUCC√àS' if success else '‚ùå √âCHEC'}")
        print(f"   ‚Ä¢ Mapping routes: {'‚úÖ OK' if mapping_ok else '‚ùå PROBL√àME'}")
        print(f"   ‚Ä¢ API fonctionnelle: {'‚úÖ OK' if api_ok else '‚ùå PROBL√àME'}")
        
        if success and mapping_ok and api_ok:
            print(f"\nüéâ PERMISSIONS OPTIMIS√âES CR√â√âES!")
            print(f"‚úÖ Bas√©es sur les {len(Permission.objects.values('category').distinct())} pages r√©elles de App.tsx")
            print(f"‚úÖ {Permission.objects.count()} permissions au total")
            print(f"‚úÖ Syst√®me all√©g√© et optimis√© pour votre application")
            print(f"\nüí° PROCHAINE √âTAPE:")
            print(f"   Actualisez le frontend pour voir les permissions organis√©es")
        else:
            print(f"\n‚ùå PROBL√àMES D√âTECT√âS - V√©rifiez les logs ci-dessus")
    else:
        print(f"\n‚ùå √âCHEC DE LA CR√âATION DES PERMISSIONS")

if __name__ == '__main__':
    main()
