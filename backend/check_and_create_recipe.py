#!/usr/bin/env python
"""
V√©rifier les produits existants et cr√©er la recette
"""

import os
import sys
import django
import requests

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barstock_api.settings')
django.setup()

def check_and_create_recipe():
    """
    V√©rifier les produits et cr√©er la recette
    """
    base_url = "http://127.0.0.1:8000/api"
    
    print("üîç V√âRIFICATION ET CR√âATION RECETTE")
    print("=" * 50)
    
    # Connexion
    login_data = {"username": "admin", "password": "admin123"}
    response = requests.post(f"{base_url}/accounts/login/", json=login_data)
    access_token = response.json()['tokens']['access']
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # V√©rifier tous les produits
    products_response = requests.get(f"{base_url}/products/", headers=headers)
    products = products_response.json().get('results', [])
    
    print(f"\nüì¶ Produits existants:")
    riz_poulet_products = []
    for product in products:
        if "Riz au Poulet" in product['name']:
            riz_poulet_products.append(product)
            print(f"   ‚úÖ {product['name']} (ID: {product['id']})")
            print(f"      PA: {float(product.get('purchase_price', 0)):,.0f} FBU")
            print(f"      PV: {float(product.get('selling_price', 0)):,.0f} FBU")
    
    if not riz_poulet_products:
        print("‚ùå Aucun produit Riz au Poulet trouv√©")
        return
    
    # Prendre le premier produit Riz au Poulet
    target_product = riz_poulet_products[0]
    print(f"\nüéØ Produit s√©lectionn√©: {target_product['name']}")
    
    # V√©rifier les ingr√©dients
    ingredients_response = requests.get(f"{base_url}/kitchen/ingredients/", headers=headers)
    ingredients = ingredients_response.json().get('results', [])
    
    print(f"\nü•ï Ingr√©dients disponibles:")
    target_ingredients = []
    for ingredient in ingredients:
        if any(keyword in ingredient['nom'] for keyword in ["Riz", "Poulet", "Huile", "√âpices"]):
            target_ingredients.append(ingredient)
            print(f"   ‚úÖ {ingredient['nom']}: {float(ingredient['prix_unitaire']):,.0f} FBU")
    
    if len(target_ingredients) < 4:
        print("‚ùå Pas assez d'ingr√©dients pour cr√©er la recette")
        return
    
    # Cr√©er la recette
    recipe_data = {
        "plat": target_product['id'],
        "nom_recette": f"Recette {target_product['name']}",
        "description": "Recette avec calcul automatique des co√ªts",
        "temps_preparation": 45,
        "portions": 1,
        "instructions": "Recette automatique pour calcul des co√ªts",
        "ingredients": []
    }
    
    # Ajouter les 4 premiers ingr√©dients
    for ingredient in target_ingredients[:4]:
        recipe_data["ingredients"].append({
            "ingredient": ingredient['id'],
            "quantite_utilisee_par_plat": 1.0,
            "unite": ingredient['unite']
        })
    
    print(f"\nüçΩÔ∏è Cr√©ation de la recette...")
    response = requests.post(f"{base_url}/kitchen/recipes/", json=recipe_data, headers=headers)
    
    if response.status_code == 201:
        recipe = response.json()
        print(f"‚úÖ Recette cr√©√©e: {recipe['nom_recette']}")
        
        # Tester le recalcul automatique
        print(f"\nüîÑ Test du recalcul automatique...")
        recalc_response = requests.post(f"{base_url}/kitchen/recalculate-purchase-prices/", headers=headers)
        
        if recalc_response.status_code == 200:
            result = recalc_response.json()
            print(f"‚úÖ Recalcul r√©ussi !")
            print(f"   üì¶ Produits mis √† jour: {result['summary']['products_updated']}")
            
            for product in result['updated_products']:
                print(f"\nüçΩÔ∏è {product['product_name']}:")
                print(f"   üí∞ Ancien PA: {product['old_purchase_price']:,.0f} FBU")
                print(f"   üí∞ Nouveau PA: {product['new_purchase_price']:,.0f} FBU")
                print(f"   üí∞ PV: {product['selling_price']:,.0f} FBU")
                print(f"   üéØ B√©n√©fice: {product['profit_per_unit']:,.0f} FBU")
                
                print(f"   üìã D√©tail des ingr√©dients:")
                for ing in product['ingredients_detail']:
                    print(f"   - {ing['ingredient']}: {ing['quantity']} √ó {ing['unit_price']:,.0f} = {ing['total_cost']:,.0f} FBU")
        else:
            print(f"‚ùå Erreur recalcul: {recalc_response.status_code}")
    else:
        print(f"‚ùå Erreur cr√©ation recette: {response.status_code}")
        print(f"R√©ponse: {response.text}")

if __name__ == '__main__':
    check_and_create_recipe()
    
    print("\n" + "="*50)
    print("üéØ SYST√àME DE CALCUL AUTOMATIQUE PR√äT !")
    print("="*50)
    
    print("\n‚úÖ FONCTIONNALIT√âS IMPL√âMENT√âES:")
    print("   üîÑ Calcul automatique des prix d'achat")
    print("   üìä Bas√© sur le co√ªt r√©el des ingr√©dients")
    print("   üéØ B√©n√©fices calcul√©s pr√©cis√©ment")
    print("   üñ±Ô∏è Bouton 'Recalculer Prix' dans Kitchen")
    
    print("\nüöÄ TESTEZ MAINTENANT:")
    print("   üçΩÔ∏è Kitchen: http://localhost:8081/kitchen")
    print("      ‚Üí Cliquez sur 'Recalculer Prix'")
    print("   üìã Daily Report: http://localhost:8081/daily-report")
    print("      ‚Üí Voir les co√ªts calcul√©s automatiquement")
