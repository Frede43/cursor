# Generated by Django 4.2.7 on 2025-08-15 11:00

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('products', '0002_product_shelf_life_days_product_storage_temperature_and_more'),
        ('suppliers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=200, verbose_name="Nom de l'ingrédient")),
                ('quantite_restante', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='Quantité restante')),
                ('unite', models.CharField(choices=[('kg', 'Kilogramme'), ('g', 'Gramme'), ('L', 'Litre'), ('ml', 'Millilitre'), ('piece', 'Pièce'), ('portion', 'Portion')], default='kg', max_length=10, verbose_name='Unité de mesure')),
                ('seuil_alerte', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name="Seuil d'alerte")),
                ('prix_unitaire', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Prix unitaire (BIF)')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ingrédient actif')),
                ('date_maj', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('fournisseur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='suppliers.supplier', verbose_name='Fournisseur principal')),
            ],
            options={
                'verbose_name': 'Ingrédient',
                'verbose_name_plural': 'Ingrédients',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_recette', models.CharField(max_length=200, verbose_name='Nom de la recette')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description de la recette')),
                ('instructions', models.TextField(blank=True, null=True, verbose_name='Instructions de préparation')),
                ('temps_preparation', models.PositiveIntegerField(blank=True, null=True, verbose_name='Temps de préparation (minutes)')),
                ('portions', models.PositiveIntegerField(default=1, verbose_name='Nombre de portions')),
                ('is_active', models.BooleanField(default=True, verbose_name='Recette active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('plat', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recipe', to='products.product', verbose_name='Plat')),
            ],
            options={
                'verbose_name': 'Recette',
                'verbose_name_plural': 'Recettes',
                'ordering': ['nom_recette'],
            },
        ),
        migrations.CreateModel(
            name='IngredientMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('in', 'Entrée'), ('out', 'Sortie'), ('adjustment', 'Ajustement'), ('loss', 'Perte'), ('return', 'Retour')], max_length=20, verbose_name='Type de mouvement')),
                ('reason', models.CharField(choices=[('purchase', 'Achat'), ('consumption', 'Consommation'), ('inventory', 'Inventaire'), ('damage', 'Dommage'), ('expiry', 'Expiration'), ('theft', 'Vol'), ('correction', 'Correction')], max_length=20, verbose_name='Raison')),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))], verbose_name='Quantité')),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Prix unitaire (BIF)')),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Montant total (BIF)')),
                ('stock_before', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Stock avant')),
                ('stock_after', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Stock après')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('reference', models.CharField(blank=True, max_length=100, null=True, verbose_name='Référence')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='kitchen.ingredient', verbose_name='Ingrédient')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='suppliers.supplier', verbose_name='Fournisseur')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Mouvement d'ingrédient",
                'verbose_name_plural': "Mouvements d'ingrédients",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantite_utilisee_par_plat', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='Quantité utilisée par plat')),
                ('unite', models.CharField(choices=[('kg', 'Kilogramme'), ('g', 'Gramme'), ('L', 'Litre'), ('ml', 'Millilitre'), ('piece', 'Pièce'), ('portion', 'Portion')], max_length=10, verbose_name='Unité de mesure')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes spéciales')),
                ('is_optional', models.BooleanField(default=False, verbose_name='Ingrédient optionnel')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='used_in_recipes', to='kitchen.ingredient', verbose_name='Ingrédient')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='kitchen.recipe', verbose_name='Recette')),
            ],
            options={
                'verbose_name': 'Ingrédient de recette',
                'verbose_name_plural': 'Ingrédients de recette',
                'ordering': ['recipe', 'ingredient__nom'],
                'unique_together': {('recipe', 'ingredient')},
            },
        ),
    ]
