#!/usr/bin/env python3
"""
Script de test manuel pour la gestion des utilisateurs BarStockWise
Guide √©tape par √©tape pour tester le workflow complet
"""

import requests
import json
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:8000/api"

class ManualTestGuide:
    def __init__(self):
        self.session = requests.Session()
        
    def log(self, message, level="INFO"):
        """Logger simple avec timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def test_server_connection(self):
        """Tester la connexion au serveur"""
        self.log("üîç Test de connexion au serveur Django...")
        try:
            response = requests.get(f"{BASE_URL}/accounts/users/", timeout=5)
            if response.status_code in [200, 401, 403]:  # 401/403 = serveur fonctionne mais pas authentifi√©
                self.log("‚úÖ Serveur Django accessible")
                return True
            else:
                self.log(f"‚ùå Serveur r√©pond avec code: {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            self.log("‚ùå Impossible de se connecter au serveur Django")
            self.log("   V√©rifiez que le serveur Django fonctionne sur localhost:8000")
            return False
        except Exception as e:
            self.log(f"‚ùå Erreur de connexion: {e}")
            return False
    
    def get_admin_credentials(self):
        """Demander les credentials admin √† l'utilisateur"""
        self.log("üîê Saisie des credentials administrateur")
        print("\n" + "="*50)
        print("√âTAPE 1: CONNEXION ADMINISTRATEUR")
        print("="*50)
        
        email = input("Email admin (d√©faut: admin@barstockwise.com): ").strip()
        if not email:
            email = "admin@barstockwise.com"
            
        password = input("Mot de passe admin (d√©faut: admin123): ").strip()
        if not password:
            password = "admin123"
            
        return {"email": email, "password": password}
    
    def test_admin_login(self, credentials):
        """Tester la connexion admin"""
        self.log("üîê Test de connexion admin...")
        try:
            response = self.session.post(
                f"{BASE_URL}/accounts/login/",
                json=credentials
            )
            if response.status_code == 200:
                data = response.json()
                token = data.get('access')
                if token:
                    self.session.headers.update({
                        'Authorization': f'Bearer {token}'
                    })
                    self.log("‚úÖ Connexion admin r√©ussie")
                    return True
                else:
                    self.log("‚ùå Token non re√ßu dans la r√©ponse")
                    return False
            else:
                self.log(f"‚ùå √âchec connexion admin: {response.status_code}")
                if response.status_code == 400:
                    self.log("   V√©rifiez les credentials admin")
                self.log(f"   R√©ponse: {response.text}")
                return False
        except Exception as e:
            self.log(f"‚ùå Erreur connexion admin: {e}")
            return False
    
    def create_test_user_interactive(self):
        """Cr√©er un utilisateur de test de mani√®re interactive"""
        print("\n" + "="*50)
        print("√âTAPE 2: CR√âATION D'UTILISATEUR TEST")
        print("="*50)
        
        # R√©cup√©rer les permissions disponibles
        self.log("üìã R√©cup√©ration des permissions...")
        try:
            response = self.session.get(f"{BASE_URL}/accounts/permissions/list/")
            if response.status_code == 200:
                permissions = response.json().get('results', [])
                self.log(f"‚úÖ {len(permissions)} permissions disponibles")
                
                print("\nPermissions disponibles:")
                for i, perm in enumerate(permissions):
                    print(f"  {i+1}. {perm.get('name', 'N/A')}")
            else:
                self.log(f"‚ùå Erreur r√©cup√©ration permissions: {response.status_code}")
                permissions = []
        except Exception as e:
            self.log(f"‚ùå Erreur permissions: {e}")
            permissions = []
        
        # Saisie des informations utilisateur
        print("\nCr√©ation d'un nouvel utilisateur:")
        first_name = input("Pr√©nom (d√©faut: Jean): ").strip() or "Jean"
        last_name = input("Nom (d√©faut: Testeur): ").strip() or "Testeur"
        email = input("Email (d√©faut: jean.testeur@test.com): ").strip() or "jean.testeur@test.com"
        phone = input("T√©l√©phone (d√©faut: 123456789): ").strip() or "123456789"
        
        print("\nR√¥les disponibles:")
        print("1. admin")
        print("2. manager") 
        print("3. staff")
        role_choice = input("Choisir un r√¥le (1-3, d√©faut: 3): ").strip()
        role_map = {"1": "admin", "2": "manager", "3": "staff"}
        role = role_map.get(role_choice, "staff")
        
        # S√©lection des permissions
        selected_permissions = []
        if permissions:
            print(f"\nAttribuer des permissions? (y/n, d√©faut: y): ", end="")
            if input().strip().lower() != 'n':
                perm_input = input(f"Num√©ros des permissions (1-{len(permissions)}, s√©par√©s par des virgules): ").strip()
                if perm_input:
                    try:
                        perm_indices = [int(x.strip()) - 1 for x in perm_input.split(',')]
                        selected_permissions = [permissions[i]['id'] for i in perm_indices if 0 <= i < len(permissions)]
                    except:
                        self.log("‚ö†Ô∏è Format invalide, aucune permission attribu√©e")
        
        user_data = {
            "first_name": first_name,
            "last_name": last_name,
            "email": email,
            "phone": phone,
            "role": role,
            "permissions": selected_permissions
        }
        
        # Cr√©er l'utilisateur
        self.log("üë§ Cr√©ation de l'utilisateur...")
        try:
            response = self.session.post(
                f"{BASE_URL}/accounts/users/",
                json=user_data
            )
            if response.status_code == 201:
                data = response.json()
                user_id = data.get('id')
                self.log(f"‚úÖ Utilisateur cr√©√© avec ID: {user_id}")
                print(f"\nüìã INFORMATIONS UTILISATEUR CR√â√â:")
                print(f"   ID: {user_id}")
                print(f"   Nom: {first_name} {last_name}")
                print(f"   Email: {email}")
                print(f"   R√¥le: {role}")
                print(f"   Permissions: {len(selected_permissions)}")
                print(f"   Mot de passe par d√©faut: temp123456")
                
                return {
                    "id": user_id,
                    "email": email,
                    "password": "temp123456",
                    "name": f"{first_name} {last_name}"
                }
            else:
                self.log(f"‚ùå √âchec cr√©ation utilisateur: {response.status_code}")
                self.log(f"   R√©ponse: {response.text}")
                return None
        except Exception as e:
            self.log(f"‚ùå Erreur cr√©ation utilisateur: {e}")
            return None
    
    def test_user_login_interactive(self, user_info):
        """Tester la connexion utilisateur de mani√®re interactive"""
        print("\n" + "="*50)
        print("√âTAPE 3: TEST CONNEXION UTILISATEUR")
        print("="*50)
        
        print(f"Test de connexion pour: {user_info['name']}")
        print(f"Email: {user_info['email']}")
        print(f"Mot de passe: {user_info['password']}")
        
        input("\nAppuyez sur Entr√©e pour tester la connexion...")
        
        # Nouvelle session pour l'utilisateur
        user_session = requests.Session()
        
        try:
            response = user_session.post(
                f"{BASE_URL}/accounts/login/",
                json={
                    "email": user_info['email'],
                    "password": user_info['password']
                }
            )
            if response.status_code == 200:
                data = response.json()
                user_token = data.get('access')
                self.log("‚úÖ Connexion utilisateur r√©ussie")
                
                # Tester l'acc√®s au profil
                user_session.headers.update({
                    'Authorization': f'Bearer {user_token}'
                })
                
                profile_response = user_session.get(f"{BASE_URL}/accounts/profile/")
                if profile_response.status_code == 200:
                    profile = profile_response.json()
                    self.log(f"‚úÖ Profil accessible: {profile.get('first_name')} {profile.get('last_name')}")
                    
                    # V√©rifier les permissions
                    permissions_response = user_session.get(f"{BASE_URL}/accounts/permissions/")
                    if permissions_response.status_code == 200:
                        perms_data = permissions_response.json()
                        user_perms = perms_data.get('permissions', {})
                        self.log(f"‚úÖ Permissions utilisateur r√©cup√©r√©es")
                        
                        print(f"\nüìã PERMISSIONS DE L'UTILISATEUR:")
                        total_perms = 0
                        for category, perms in user_perms.items():
                            if perms:
                                print(f"   {category}: {len(perms)} permissions")
                                for perm in perms[:3]:  # Afficher les 3 premi√®res
                                    print(f"     - {perm}")
                                total_perms += len(perms)
                        
                        if total_perms == 0:
                            print("   Aucune permission sp√©cifique attribu√©e")
                    
                return user_session, user_token
            else:
                self.log(f"‚ùå √âchec connexion utilisateur: {response.status_code}")
                self.log(f"   R√©ponse: {response.text}")
                return None, None
        except Exception as e:
            self.log(f"‚ùå Erreur connexion utilisateur: {e}")
            return None, None
    
    def test_password_reset_interactive(self, user_info):
        """Tester la r√©initialisation de mot de passe"""
        print("\n" + "="*50)
        print("√âTAPE 4: TEST R√âINITIALISATION MOT DE PASSE")
        print("="*50)
        
        print(f"R√©initialisation du mot de passe pour: {user_info['name']}")
        input("Appuyez sur Entr√©e pour r√©initialiser le mot de passe...")
        
        try:
            response = self.session.post(
                f"{BASE_URL}/accounts/users/{user_info['id']}/reset-password/"
            )
            if response.status_code == 200:
                data = response.json()
                new_password = data.get('temp_password')
                self.log(f"‚úÖ Mot de passe r√©initialis√©")
                
                print(f"\nüîë NOUVEAU MOT DE PASSE:")
                print(f"   Utilisateur: {user_info['name']}")
                print(f"   Nouveau mot de passe: {new_password}")
                print(f"   Format: {data.get('format', 'N/A')}")
                print(f"   Instructions: {data.get('instructions', 'N/A')}")
                
                # Mettre √† jour les informations utilisateur
                user_info['password'] = new_password
                return True
            else:
                self.log(f"‚ùå √âchec r√©initialisation: {response.status_code}")
                self.log(f"   R√©ponse: {response.text}")
                return False
        except Exception as e:
            self.log(f"‚ùå Erreur r√©initialisation: {e}")
            return False
    
    def test_new_password_login(self, user_info):
        """Tester la connexion avec le nouveau mot de passe"""
        print("\n" + "="*50)
        print("√âTAPE 5: TEST CONNEXION NOUVEAU MOT DE PASSE")
        print("="*50)
        
        print(f"Test de connexion avec le nouveau mot de passe:")
        print(f"Email: {user_info['email']}")
        print(f"Nouveau mot de passe: {user_info['password']}")
        
        input("Appuyez sur Entr√©e pour tester la connexion...")
        
        user_session = requests.Session()
        
        try:
            response = user_session.post(
                f"{BASE_URL}/accounts/login/",
                json={
                    "email": user_info['email'],
                    "password": user_info['password']
                }
            )
            if response.status_code == 200:
                self.log("‚úÖ Connexion avec nouveau mot de passe r√©ussie")
                
                # V√©rifier l'acc√®s aux donn√©es
                data = response.json()
                user_token = data.get('access')
                user_session.headers.update({
                    'Authorization': f'Bearer {user_token}'
                })
                
                profile_response = user_session.get(f"{BASE_URL}/accounts/profile/")
                if profile_response.status_code == 200:
                    self.log("‚úÖ Acc√®s au profil confirm√© apr√®s r√©initialisation")
                    return True
                
            else:
                self.log(f"‚ùå √âchec connexion nouveau mot de passe: {response.status_code}")
                return False
        except Exception as e:
            self.log(f"‚ùå Erreur test nouveau mot de passe: {e}")
            return False
    
    def run_interactive_test(self):
        """Ex√©cuter le test interactif complet"""
        print("üöÄ BarStockWise - Test Interactif de Gestion Utilisateur")
        print("=" * 60)
        
        # Test 1: Connexion serveur
        if not self.test_server_connection():
            print("\n‚ùå Impossible de continuer sans connexion serveur")
            return False
        
        # Test 2: Connexion admin
        admin_creds = self.get_admin_credentials()
        if not self.test_admin_login(admin_creds):
            print("\n‚ùå Impossible de continuer sans connexion admin")
            return False
        
        # Test 3: Cr√©ation utilisateur
        user_info = self.create_test_user_interactive()
        if not user_info:
            print("\n‚ùå Impossible de continuer sans utilisateur cr√©√©")
            return False
        
        # Test 4: Connexion utilisateur
        user_session, user_token = self.test_user_login_interactive(user_info)
        if not user_session:
            print("\n‚ùå √âchec connexion utilisateur")
            return False
        
        # Test 5: R√©initialisation mot de passe
        if not self.test_password_reset_interactive(user_info):
            print("\n‚ùå √âchec r√©initialisation mot de passe")
            return False
        
        # Test 6: Connexion avec nouveau mot de passe
        if not self.test_new_password_login(user_info):
            print("\n‚ùå √âchec connexion nouveau mot de passe")
            return False
        
        # R√©sum√© final
        print("\n" + "="*60)
        print("üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        print("="*60)
        print("‚úÖ Serveur Django accessible")
        print("‚úÖ Connexion administrateur fonctionnelle")
        print("‚úÖ Cr√©ation d'utilisateur fonctionnelle")
        print("‚úÖ Connexion utilisateur fonctionnelle")
        print("‚úÖ Permissions correctement attribu√©es et visibles")
        print("‚úÖ R√©initialisation mot de passe fonctionnelle")
        print("‚úÖ Connexion avec nouveau mot de passe fonctionnelle")
        print("\nüéØ Le syst√®me de gestion des utilisateurs fonctionne parfaitement!")
        
        # Option de nettoyage
        print(f"\nüßπ Voulez-vous supprimer l'utilisateur test '{user_info['name']}'? (y/n): ", end="")
        if input().strip().lower() == 'y':
            try:
                response = self.session.delete(f"{BASE_URL}/accounts/users/{user_info['id']}/")
                if response.status_code in [204, 200]:
                    self.log("‚úÖ Utilisateur test supprim√©")
                else:
                    self.log(f"‚ö†Ô∏è Suppression partielle: {response.status_code}")
            except Exception as e:
                self.log(f"‚ö†Ô∏è Erreur nettoyage: {e}")
        
        return True

def main():
    """Point d'entr√©e principal"""
    guide = ManualTestGuide()
    success = guide.run_interactive_test()
    
    if success:
        print("\n‚ú® Test termin√© avec succ√®s!")
    else:
        print("\n‚ùå Test termin√© avec des erreurs")

if __name__ == "__main__":
    main()
