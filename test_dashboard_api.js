// Test de l'API du dashboard pour diagnostiquer pourquoi les valeurs sont √† 0

async function testDashboardAPI() {
    console.log('üîç Test de l\'API Dashboard...\n');
    
    const backendUrl = 'http://127.0.0.1:8000/api';
    
    try {
        // Test de l'API dashboard stats
        console.log('üì° Test /reports/dashboard/stats/');
        const response = await fetch(`${backendUrl}/reports/dashboard/stats/`);
        
        console.log(`Status: ${response.status}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Donn√©es re√ßues:');
            console.log(JSON.stringify(data, null, 2));
            
            // Analyser les donn√©es
            console.log('\nüìä Analyse des donn√©es:');
            console.log(`‚Ä¢ Date: ${data.today?.date}`);
            console.log(`‚Ä¢ Ventes du jour: ${data.today?.sales || 0}`);
            console.log(`‚Ä¢ Revenus du jour: ${data.today?.revenue || 0} BIF`);
            console.log(`‚Ä¢ Commandes en cours: ${data.today?.pending_sales || 0}`);
            console.log(`‚Ä¢ Produits actifs: ${data.quick_stats?.total_products || 0}`);
            console.log(`‚Ä¢ Alertes actives: ${data.alerts?.total_unresolved || 0}`);
            console.log(`‚Ä¢ Stock bas: ${data.alerts?.low_stock || 0}`);
            console.log(`‚Ä¢ Rupture de stock: ${data.alerts?.out_of_stock || 0}`);
            
            // V√©rifier pourquoi les valeurs sont √† 0
            if (data.today?.sales === 0) {
                console.log('\n‚ö†Ô∏è  Ventes √† 0 - Causes possibles:');
                console.log('   ‚Ä¢ Aucune vente enregistr√©e aujourd\'hui');
                console.log('   ‚Ä¢ Probl√®me avec le mod√®le DailyReport');
                console.log('   ‚Ä¢ Donn√©es de test manquantes');
            }
            
            if (data.quick_stats?.total_products === 0) {
                console.log('\n‚ö†Ô∏è  Produits √† 0 - Causes possibles:');
                console.log('   ‚Ä¢ Aucun produit actif en base');
                console.log('   ‚Ä¢ Probl√®me de requ√™te SQL');
            }
            
            return data;
        } else {
            console.log(`‚ùå Erreur API: ${response.status}`);
            const errorText = await response.text();
            console.log(`R√©ponse: ${errorText}`);
            return null;
        }
        
    } catch (error) {
        console.log(`‚ùå Erreur: ${error.message}`);
        return null;
    }
}

async function testRelatedAPIs() {
    console.log('\nüîç Test des APIs connexes...\n');
    
    const backendUrl = 'http://127.0.0.1:8000/api';
    
    const endpoints = [
        { name: 'Produits', url: '/products/', expectAuth: true },
        { name: 'Rapports journaliers', url: '/reports/daily/', expectAuth: false },
        { name: 'Rapport d√©taill√©', url: '/reports/daily-detailed/2025-08-18/', expectAuth: false },
        { name: 'Alertes', url: '/reports/alerts/unresolved/', expectAuth: false }
    ];
    
    for (const endpoint of endpoints) {
        try {
            console.log(`üì° Test ${endpoint.name}: ${endpoint.url}`);
            const response = await fetch(`${backendUrl}${endpoint.url}`);
            
            if (response.ok) {
                const data = await response.json();
                console.log(`   ‚úÖ Status: ${response.status}`);
                
                if (data.results) {
                    console.log(`   üì¶ R√©sultats: ${data.results.length} √©l√©ments`);
                } else if (Array.isArray(data)) {
                    console.log(`   üì¶ R√©sultats: ${data.length} √©l√©ments`);
                } else if (data.count !== undefined) {
                    console.log(`   üì¶ Count: ${data.count}`);
                } else {
                    console.log(`   üì¶ Donn√©es: ${Object.keys(data).join(', ')}`);
                }
            } else {
                console.log(`   ‚ùå Status: ${response.status}`);
                if (response.status === 401 && endpoint.expectAuth) {
                    console.log(`   üí° Authentification requise (normal)`);
                }
            }
        } catch (error) {
            console.log(`   üí• Erreur: ${error.message}`);
        }
        console.log('');
    }
}

async function suggestFixes(dashboardData) {
    console.log('\nüîß Suggestions de correction...\n');
    
    if (!dashboardData) {
        console.log('‚ùå Impossible d\'analyser - API dashboard non accessible');
        return;
    }
    
    const issues = [];
    const fixes = [];
    
    // V√©rifier les ventes
    if (dashboardData.today?.sales === 0) {
        issues.push('Ventes du jour √† 0');
        fixes.push('Cr√©er des donn√©es de vente de test');
        fixes.push('V√©rifier le mod√®le DailyReport');
    }
    
    // V√©rifier les produits
    if (dashboardData.quick_stats?.total_products === 0) {
        issues.push('Aucun produit actif');
        fixes.push('Ajouter des produits via l\'admin Django');
        fixes.push('V√©rifier le champ is_active des produits');
    }
    
    // V√©rifier les alertes
    if (dashboardData.alerts?.total_unresolved === 0) {
        issues.push('Aucune alerte (peut √™tre normal)');
    }
    
    console.log('üîç Probl√®mes d√©tect√©s:');
    issues.forEach((issue, i) => console.log(`   ${i + 1}. ${issue}`));
    
    console.log('\nüí° Actions recommand√©es:');
    fixes.forEach((fix, i) => console.log(`   ${i + 1}. ${fix}`));
    
    console.log('\nüìã √âtapes imm√©diates:');
    console.log('   1. V√©rifier les donn√©es en base via l\'admin Django');
    console.log('   2. Cr√©er des donn√©es de test si n√©cessaire');
    console.log('   3. Red√©marrer le serveur Django');
    console.log('   4. Rafra√Æchir le dashboard frontend');
}

// Ex√©cuter les tests
async function runAllTests() {
    console.log('üß™ Diagnostic complet du Dashboard');
    console.log('=' * 50);
    
    // Test principal
    const dashboardData = await testDashboardAPI();
    
    // Tests connexes
    await testRelatedAPIs();
    
    // Suggestions
    await suggestFixes(dashboardData);
}

runAllTests();
