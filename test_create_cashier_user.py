#!/usr/bin/env python
"""
Script automatis√© pour tester la cr√©ation d'un utilisateur caissier
avec des permissions sp√©cifiques
"""

import os
import sys
import django
import requests
import json
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barstock_api.settings')
sys.path.append('backend')
django.setup()

from django.contrib.auth import get_user_model
from accounts.models import Permission, UserPermission

User = get_user_model()

class CashierUserTester:
    def __init__(self):
        self.admin_token = None
        self.cashier_token = None
        self.cashier_user_id = None
        
    def log(self, message, success=True):
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {message}")
    
    def login_as_admin(self):
        """Se connecter en tant qu'admin"""
        print("üîê CONNEXION ADMIN...")
        try:
            response = requests.post('http://localhost:8000/api/accounts/login/', {
                'username': 'admin',
                'password': 'admin123'
            })
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data['tokens']['access']
                self.log("Admin connect√© avec succ√®s")
                return True
            else:
                self.log(f"√âchec connexion admin: {response.status_code}", False)
                return False
        except Exception as e:
            self.log(f"Erreur connexion admin: {e}", False)
            return False
    
    def create_cashier_permissions(self):
        """Cr√©er les permissions sp√©cifiques pour le caissier"""
        print("\nüîß CR√âATION DES PERMISSIONS...")
        
        # Permissions exactes selon vos sp√©cifications
        cashier_permissions = [
            {
                'code': 'sales_manage',
                'name': 'G√©rer les ventes',
                'description': 'Peut cr√©er, modifier et g√©rer les ventes',
                'category': 'sales'
            },
            {
                'code': 'sales_history_view',
                'name': 'Voir l\'historique des ventes',
                'description': 'Peut consulter l\'historique complet des ventes',
                'category': 'sales'
            },
            {
                'code': 'tables_manage',
                'name': 'G√©rer les tables',
                'description': 'Peut g√©rer l\'√©tat et les r√©servations des tables',
                'category': 'tables'
            },
            {
                'code': 'products_view',
                'name': 'Voir les produits',
                'description': 'Peut consulter le catalogue de produits (lecture seule)',
                'category': 'products'
            }
            # Note: Pas de permission 'products_add' ou 'products_manage'
        ]
        
        try:
            created_count = 0
            for perm_data in cashier_permissions:
                permission, created = Permission.objects.get_or_create(
                    code=perm_data['code'],
                    defaults=perm_data
                )
                if created:
                    created_count += 1
            
            self.log(f"Permissions cr√©√©es/v√©rifi√©es: {len(cashier_permissions)} ({created_count} nouvelles)")
            return True
        except Exception as e:
            self.log(f"Erreur cr√©ation permissions: {e}", False)
            return False
    
    def create_cashier_user(self):
        """Cr√©er un utilisateur caissier via l'API"""
        print("\nüë§ CR√âATION UTILISATEUR CAISSIER...")
        
        try:
            # Supprimer l'ancien utilisateur de test s'il existe
            User.objects.filter(username='test_caissier').delete()
            
            headers = {
                'Authorization': f'Bearer {self.admin_token}',
                'Content-Type': 'application/json'
            }
            
            # Donn√©es du caissier selon vos sp√©cifications
            cashier_data = {
                'username': 'test_caissier',
                'first_name': 'Marie',
                'last_name': 'Dupont',
                'email': 'marie.dupont@barstock.com',
                'phone': '+25712345678',
                'role': 'cashier',
                'password': 'caissier123',
                'permissions': [
                    'sales_manage',
                    'sales_history_view', 
                    'tables_manage',
                    'products_view'
                ]
            }
            
            response = requests.post(
                'http://localhost:8000/api/accounts/users/',
                json=cashier_data,
                headers=headers
            )
            
            if response.status_code in [200, 201]:
                user_data = response.json()
                self.cashier_user_id = user_data.get('id')
                self.log(f"Caissier cr√©√©: {user_data.get('username')} (ID: {self.cashier_user_id})")
                self.log(f"  - Nom: {user_data.get('first_name')} {user_data.get('last_name')}")
                self.log(f"  - Email: {user_data.get('email')}")
                self.log(f"  - R√¥le: {user_data.get('role')}")
                return True
            else:
                self.log(f"√âchec cr√©ation caissier: {response.status_code} - {response.text}", False)
                return False
                
        except Exception as e:
            self.log(f"Erreur cr√©ation caissier: {e}", False)
            return False
    
    def test_cashier_login(self):
        """Tester la connexion du caissier"""
        print("\nüîë TEST CONNEXION CAISSIER...")
        
        try:
            response = requests.post('http://localhost:8000/api/accounts/login/', {
                'username': 'test_caissier',
                'password': 'caissier123'
            })
            
            if response.status_code == 200:
                data = response.json()
                self.cashier_token = data['tokens']['access']
                user_info = data['user']
                
                self.log("Caissier connect√© avec succ√®s")
                self.log(f"  - Username: {user_info['username']}")
                self.log(f"  - R√¥le: {user_info['role']}")
                return True
            else:
                self.log(f"√âchec connexion caissier: {response.status_code}", False)
                return False
        except Exception as e:
            self.log(f"Erreur connexion caissier: {e}", False)
            return False
    
    def test_cashier_permissions(self):
        """Tester les permissions du caissier"""
        print("\nüõ°Ô∏è TEST DES PERMISSIONS...")
        
        if not self.cashier_token:
            self.log("Token caissier manquant", False)
            return False
        
        headers = {
            'Authorization': f'Bearer {self.cashier_token}',
            'Content-Type': 'application/json'
        }
        
        # Tests des acc√®s autoris√©s
        authorized_tests = [
            {
                'name': 'Ventes',
                'url': 'http://localhost:8000/api/sales/',
                'description': 'Doit pouvoir g√©rer les ventes'
            },
            {
                'name': 'Tables',
                'url': 'http://localhost:8000/api/sales/tables/',
                'description': 'Doit pouvoir g√©rer les tables'
            },
            {
                'name': 'Produits (lecture)',
                'url': 'http://localhost:8000/api/products/',
                'description': 'Doit pouvoir voir les produits'
            }
        ]
        
        # Tests des acc√®s interdits
        forbidden_tests = [
            {
                'name': 'Gestion utilisateurs',
                'url': 'http://localhost:8000/api/accounts/users/',
                'description': 'Ne doit PAS pouvoir g√©rer les utilisateurs'
            },
            {
                'name': 'Gestion fournisseurs',
                'url': 'http://localhost:8000/api/suppliers/',
                'description': 'Ne doit PAS pouvoir g√©rer les fournisseurs'
            }
        ]
        
        all_passed = True
        
        # Test des acc√®s autoris√©s
        print("  üìã Acc√®s autoris√©s:")
        for test in authorized_tests:
            try:
                response = requests.get(test['url'], headers=headers)
                if response.status_code == 200:
                    self.log(f"    {test['name']}: Acc√®s OK")
                else:
                    self.log(f"    {test['name']}: Acc√®s refus√© (HTTP {response.status_code})", False)
                    all_passed = False
            except Exception as e:
                self.log(f"    {test['name']}: Erreur - {e}", False)
                all_passed = False
        
        # Test des acc√®s interdits
        print("  üö´ Acc√®s interdits:")
        for test in forbidden_tests:
            try:
                response = requests.get(test['url'], headers=headers)
                if response.status_code == 403:
                    self.log(f"    {test['name']}: Correctement bloqu√©")
                else:
                    self.log(f"    {test['name']}: PROBL√àME - Acc√®s autoris√© (HTTP {response.status_code})", False)
                    all_passed = False
            except Exception as e:
                self.log(f"    {test['name']}: Erreur - {e}", False)
                all_passed = False
        
        return all_passed
    
    def run_complete_test(self):
        """Ex√©cuter le test complet"""
        print("üß™ TEST COMPLET - CR√âATION UTILISATEUR CAISSIER")
        print("=" * 60)
        print("Objectif: Cr√©er un caissier avec permissions sp√©cifiques:")
        print("  ‚úÖ G√©rer les ventes")
        print("  ‚úÖ Voir l'historique des ventes") 
        print("  ‚úÖ G√©rer les tables")
        print("  ‚úÖ Voir les produits (lecture seule)")
        print("  ‚ùå PAS d'ajout de produits")
        print("=" * 60)
        
        # Ex√©cuter tous les tests
        steps = [
            ("Connexion admin", self.login_as_admin),
            ("Cr√©ation permissions", self.create_cashier_permissions),
            ("Cr√©ation caissier", self.create_cashier_user),
            ("Test connexion caissier", self.test_cashier_login),
            ("Test permissions", self.test_cashier_permissions)
        ]
        
        all_success = True
        for step_name, step_func in steps:
            print(f"\nüìç {step_name.upper()}...")
            success = step_func()
            if not success:
                all_success = False
                break
        
        # R√©sum√© final
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DU TEST")
        print("=" * 60)
        
        if all_success:
            print("üéâ TEST R√âUSSI!")
            print("‚úÖ Utilisateur caissier cr√©√© avec succ√®s")
            print("‚úÖ Permissions correctement configur√©es")
            print("‚úÖ Acc√®s autoris√©s fonctionnent")
            print("‚úÖ Acc√®s interdits sont bloqu√©s")
            print("\nüöÄ INFORMATIONS DE CONNEXION:")
            print("  Username: test_caissier")
            print("  Password: caissier123")
            print("  URL: http://localhost:5173")
            print("\nüí° VOUS POUVEZ MAINTENANT:")
            print("  1. Vous connecter avec ces identifiants")
            print("  2. Tester les fonctionnalit√©s de vente")
            print("  3. V√©rifier que l'ajout de produits est bloqu√©")
        else:
            print("‚ùå TEST √âCHOU√â")
            print("Des probl√®mes ont √©t√© d√©tect√©s dans la configuration")
        
        return all_success

if __name__ == "__main__":
    tester = CashierUserTester()
    success = tester.run_complete_test()
    
    if success:
        print("\nüéä F√âLICITATIONS!")
        print("Le syst√®me de cr√©ation d'utilisateurs fonctionne parfaitement!")
    else:
        print("\n‚ö†Ô∏è Des corrections sont n√©cessaires...")
    
    sys.exit(0 if success else 1)
